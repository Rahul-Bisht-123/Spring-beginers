//Creating a Resource controller => GreetingController

package com.example.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s";
    private final AtomicLong counter = new AtomicLong();

    @GetMapping("/greeting")
    public Greeting greeting(@RequestParam(value = "name", defaultValue = "world")String name)
    {
        return new Greeting(counter.incrementAndGet(),String.format(template,name));
    }
}




// ----------private final AtomicLong counter = new AtomicLong();--------------
// In summary, this above line creates a private, final instance variable named counter 
// of type AtomicLong, which can be used within the class for thread-safe operations 
// on a long integer value. The use of AtomicLong ensures that concurrent access and 
// modification of this counter variable by multiple threads are handled safely without 
// the need for explicit synchronization.


// -----return new Greeting(counter.incrementAndGet(),String.format(template,name));-----
// So, in summary, this line of code is creating a new Greeting object with a 
// unique identifier obtained from an atomic counter (counter.incrementAndGet()) 
// and a message string generated by formatting the template string with the name variable.
// The resulting Greeting object likely represents a personalized greeting message with 
// a unique identifier.